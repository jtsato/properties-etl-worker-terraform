name: Continuous Deployment to GCP [Infra-Windows]

on:
  workflow_dispatch:

concurrency:
  group: "continuous-deployment-gcp"
  cancel-in-progress: false

jobs:
  deploy-infrastructure:
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.7

      - name: Get the microservice version from README.md
        id: version
        run: |
          $PRP_PRD = Get-Content README.md | Select-String -Pattern '(?<=<!-- etl-prd-start -->).*(?=<!-- etl-prd-end -->)' | ForEach-Object { $_.Matches.Value }
          Write-Output "PRP_PRD=$PRP_PRD" >> $env:GITHUB_ENV

      - name: Build Image URL
        id: build_image_url
        run: |
          Write-Output "IMAGE_URL=${env:DOCKER_REGISTRY}/jtsato/${env:ARTIFACT_NAME}:${env:PRP_PRD}" >> $env:GITHUB_ENV

      - name: Set Environment Variables from GitHub Secrets
        env:
          IMAGE_URL: ${{ env.IMAGE_URL }}
          PRP_PRD: ${{ env.PRP_PRD }}
        run: |
          Write-Output "TF_LOG=debug" >> $env:GITHUB_ENV
          Write-Output "TF_VAR_PROJECT_ID=${env:PROJECT_ID}" >> $env:GITHUB_ENV
          Write-Output "TF_VAR_PROJECT_OWNER=${secrets:PROJECT_OWNER}" >> $env:GITHUB_ENV
          Write-Output "TF_VAR_CLOUD_REGION=${env:CLOUD_REGION}" >> $env:GITHUB_ENV
          Write-Output "TF_VAR_BUCKET_NAME=${env:BUCKET_NAME}" >> $env:GITHUB_ENV

      - name: Terraform Version
        run: terraform -version

      - name: Terraform Init
        working-directory: gcp-infrastructure
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
        run: terraform init

      - name: Terraform validate
        working-directory: gcp-infrastructure
        run: |
          terraform validate

      - name: Verify Terraform Providers
        working-directory: gcp-infrastructure
        run: |
          terraform providers lock -platform=windows_amd64 -platform=darwin_amd64 -platform=linux_amd64 -platform=darwin_arm64 -platform=linux_arm64

      - name: Create secrets.tfvars
        working-directory: gcp-infrastructure
        run: |
          Write-Output "project_id=\"$env:TF_VAR_PROJECT_ID\"" > secrets.tfvars
          Write-Output "project_owner=\"$env:TF_VAR_PROJECT_OWNER\"" >> secrets.tfvars
          Write-Output "cloud_region=\"$env:TF_VAR_CLOUD_REGION\"" >> secrets.tfvars
          Write-Output "bucket_name=\"$env:TF_VAR_BUCKET_NAME\"" >> secrets.tfvars

      - name: Terraform Destroy
        continue-on-error: true
        working-directory: gcp-infrastructure
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
        run: |
          terraform destroy -auto-approve -var-file=secrets.tfvars

      - name: Terraform Refresh
        continue-on-error: true
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
        run: |
          terraform refresh -var-file=secrets.tfvars

      - name: Terraform State List
        continue-on-error: true
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
        run: |
          terraform state list

      - name: Terraform Plan
        continue-on-error: true
        id: plan
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
        run: |
          terraform plan -out=tfplan.out -var-file=secrets.tfvars

      - name: Terraform Apply
        continue-on-error: true
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
        run: |
          terraform apply -auto-approve tfplan.out
